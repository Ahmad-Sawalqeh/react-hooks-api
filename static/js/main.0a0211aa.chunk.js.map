{"version":3,"sources":["components/footer/footer.js","components/if/index.js","components/modal/modal.js","components/header/header.js","components/pagination/pagination.js","components/context/context.js","components/hooks/useForm.js","components/to-do-list/api-with-toDoList.js","app.js","index.js"],"names":["Footer","render","condition","children","When","props","Modal","className","title","onClick","close","Header","todoList","filter","item","complete","length","Pagination","postsPerPage","totalPosts","paginate","curent","pageNumbers","i","Math","ceil","push","map","number","key","href","SettingsContext","React","createContext","SettingProvider","useState","display","setDisplay","currentPage","setCurrentPage","state","changeDisplay","changeCurrentPage","Provider","value","useForm","setItem","showDetails","setShowDetails","details","setDetails","e","target","name","id","newDhowDetails","newDetails","_id","todoAPI","ToDoList","context","useContext","setTodoList","handleInputChange","toggleDetails","callAPI","url","method","body","handler","errorHandler","fetch","mode","cache","headers","JSON","stringify","undefined","then","response","json","data","catch","console","error","toggleComplete","updatedItem","newItem","useEffect","results","indexOfLastPost","indexOfFirstPost","currentPosts","slice","onSubmit","preventDefault","reset","placeholder","required","onChange","type","toString","text","pageNumber","assignee","due","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0a0211aa.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport './footer.scss';\n\nfunction Footer() {\n\n  return (\n    <footer>\n      <p>Powered by Ahmad Sawalqeh</p>\n    </footer>\n  );\n\n}\n\nexport default Footer;\n","import React from 'react';\n\nconst render = (condition = false, children = null) => {\n  return condition ? children : null;\n};\n\nexport const If = props =>\n  React.Children.map(props.children, child => {\n    return React.cloneElement(child, { condition: props.condition, });\n  });\n\nexport const Then = props => render(props.condition, props.children);\nexport const Else = props => render(!props.condition, props.children);\n\nexport const When = props => render(props.condition, props.children);\nexport const Unless = props => render(!props.condition, props.children);\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\n\n// import styles from './modal.scss';\nimport './modal.scss';\n\nconst Modal = props => {\n  return (\n    <div className='modal'>\n      <div>\n        <header>\n          <span className=\"title\">{props.title}</span>\n          <button onClick={props.close}>X</button>\n        </header>\n        <div>{props.children}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\n// import React, { useState } from 'react';\nimport './header.scss';\n\nfunction Header(props) {\n\n  return (\n    <header>\n      <h1>\n        <span>There are </span>\n        {props.todoList.filter( item => !item.complete ).length}\n        <span> Items To Complete</span>\n      </h1>\n    </header>\n  );\n\n}\n\nexport default Header;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport './pagination.scss';\n\nconst Pagination = ({ postsPerPage, totalPosts, paginate ,curent,}) => {\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  const next = ()=>{\n    if(curent + 1 <= pageNumbers.length) paginate(curent + 1);\n  };\n  const prev = ()=>{\n    if(curent - 1 > 0) paginate(curent - 1);\n\n  };\n\n  return (\n    <nav>\n      <ul className='pagination'>\n        {pageNumbers.map(number => (\n          <li key={number} className='page-item'>\n            <a onClick={() => paginate(number)} href='!#' className='page-link'>{number}</a>\n          </li>\n        ))}\n      </ul>\n      <button onClick={prev} >Previous</button>\n      <button onClick={next} className=\"right\">Next</button>\n    </nav>\n  );\n};\n\nexport default Pagination;\n","\nimport React, {useState} from 'react';\n\nexport const SettingsContext = React.createContext();\n\nfunction SettingProvider(props) {\n\n  const [display, setDisplay] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(3);\n\n  const state = {\n    display,\n    currentPage,\n    postsPerPage,\n    changeDisplay:setDisplay,\n    changeCurrentPage:setCurrentPage,\n  };\n\n  return(\n    <SettingsContext.Provider value={state}>\n      {props.children}\n    </SettingsContext.Provider>\n  );\n}\n\nexport default SettingProvider;\n","import { useState } from 'react';\n\nfunction useForm(todoList) {\n\n  const [ item, setItem ] = useState({});\n  const [ showDetails, setShowDetails ] = useState(false);\n  const [ details, setDetails ] = useState({});\n\n  function handleInputChange(e) {\n    setItem({...item, [e.target.name]: e.target.value,} );\n  }\n\n  function toggleDetails (id) {\n    // setDetails(!showDetails);\n    // setShowDetails(todoList.filter( item => item._id === id )[0] || {});\n    let newDhowDetails = !showDetails;\n    let newDetails = todoList.filter( item => item._id === id )[0] || {};\n    setDetails(newDetails);\n    setShowDetails(newDhowDetails);\n  }\n\n  return [item, handleInputChange, details, showDetails, toggleDetails];\n}\n\nexport default useForm;\n","/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect, useContext } from 'react';\nimport { When } from '../if/index.js';\nimport Modal from '../modal/modal.js';\nimport Header from '../header/header.js';\n\nimport Pagination from '../pagination/pagination.js';\nimport { SettingsContext } from '../context/context.js';\n\n// import useFetch from '../hooks/useFetch.js';\nimport useForm from '../hooks/useForm.js';\n\nimport './toDoList.scss';\n\nconst todoAPI = 'https://api-js401.herokuapp.com/api/v1/todo';\n\nfunction ToDoList (props) {\n\n  const context = useContext(SettingsContext);\n\n  const [ todoList, setTodoList ] = useState([]);\n\n  const [ item, handleInputChange, details, showDetails, toggleDetails] = useForm(todoList);\n  // const [ addItem, deleteItem, toggleComplete ] = useFetch(item);\n\n  const callAPI = (url, method = 'get', body, handler, errorHandler) => {\n    return fetch(url, {\n      method: method,\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: { 'Content-Type': 'application/json', },\n      body: body ? JSON.stringify(body) : undefined,\n    })\n      .then(response => response.json())\n      .then(data => typeof handler === 'function' ? handler(data) : null )\n      .catch( (e) => typeof errorHandler === 'function' ? errorHandler(e) : console.error(e) );\n  };\n\n  function addItem (e) {\n    e.preventDefault();\n    e.target.reset();\n    const _updateState = newItem =>{\n      setTodoList([...todoList, newItem]);\n    };\n    callAPI( todoAPI, 'POST', item, _updateState );\n  }\n\n  function deleteItem (id) {\n    const _updateState = results => {\n      setTodoList(todoList.filter(item => item._id !== id),);\n    };\n    callAPI( `${todoAPI}/${id}`, 'DELETE', undefined, _updateState );\n  }\n\n  function saveItem (updatedItem) {\n    const _updateState = newItem => {\n      setTodoList(todoList.map(item => item._id === newItem._id ? newItem : item ));\n    };\n    callAPI( `${todoAPI}/${updatedItem.id}`, 'PUT', updatedItem, _updateState );\n  }\n\n  function toggleComplete (id) {\n    let newItem = todoList.filter(i => i._id === id)[0] || {};\n    if (newItem._id) {\n      newItem.complete = !newItem.complete;\n      saveItem(newItem);\n    }\n  }\n\n  useEffect (() => {\n    const _updateState = data => {\n      setTodoList(data.results);\n    };\n    callAPI( todoAPI, 'GET', undefined, _updateState );\n\n    // return fetch(todoAPI, {\n    //   method: 'GET',\n    //   mode: 'cors',\n    //   cache: 'no-cache',\n    //   headers: { 'Content-Type': 'application/json', },\n    //   body: undefined,\n    // })\n    //   .then(response => response.json())\n    //   .then(data => setTodoList(data.results))\n    //   .catch( (e) => console.error(e) );\n\n  },[]);\n\n  // Get current posts\n  const indexOfLastPost = context.currentPage * context.postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - context.postsPerPage;\n  const currentPosts = todoList.slice(indexOfFirstPost, indexOfLastPost);\n\n  // Change page\n  const paginate = pageNumber => context.changeCurrentPage(pageNumber);\n\n  const hide = () =>{\n    context.changeDisplay(false);\n  };\n\n  const show = () =>{\n    context.changeDisplay(true);\n  };\n\n  return (\n    <>\n      <Header todoList={todoList}/>\n\n      <section className=\"todo\">\n        <fieldset>\n          <div>\n            <h3>Add Item</h3>\n            <form onSubmit={addItem}>\n              <label>\n                <span>To Do Item</span>\n                <input\n                  name=\"text\"\n                  placeholder=\"Add To Do List Item\"\n                  required\n                  onChange={handleInputChange}\n                />\n              </label>\n              {/* <label>\n                <span>Difficulty Rating  </span>\n                <input type=\"range\" min=\"1\" max=\"5\" name=\"difficulty\" defaultValue=\"3\" onChange={handleInputChange} />\n              </label> */}\n\n              <label>Difficulty:\n                <select name= \"difficulty\" onChange={handleInputChange}>\n                  <option value =\"1\">1</option>\n                  <option value =\"2\">2</option>\n                  <option value =\"3\">3</option>\n                  <option value =\"4\">4</option>\n                  <option value =\"5\">5</option>\n                </select>\n              </label>\n\n              <label>\n                <span>Assigned To  </span>\n                <input type=\"text\" name=\"assignee\" placeholder=\"Assigned To\" onChange={handleInputChange} />\n              </label>\n\n              <label>\n                <span>Due  </span>\n                <input type=\"date\" name=\"due\" onChange={handleInputChange} />\n              </label>\n              <button className='add'>Add Item</button>\n            </form>\n          </div>\n        </fieldset>\n\n        <div>\n          <ul>\n            { currentPosts.map(item => (\n              <li\n                className={`complete-${item.complete.toString()} - ${context.display}`}\n                key={item._id}\n              >\n                <span onClick={() => toggleComplete(item._id)}>\n                  {item.text}\n                </span>\n                <button onClick={() => toggleDetails(item._id)}>\n                  Details\n                </button>\n                <button onClick={() => deleteItem(item._id)}>\n                  Delete\n                </button>\n              </li>\n            ))}\n          </ul>\n          {/* <button onClick={hide}>Hide completed</button>\n          <button onClick={show}>Show completed</button> */}\n          <Pagination\n            postsPerPage={context.postsPerPage}\n            totalPosts={todoList.length}\n            paginate={paginate}\n            curent={context.currentPage}\n          />\n        </div>\n      </section>\n\n      <When condition={showDetails}>\n        <Modal title=\"To Do Item\" close={toggleDetails}>\n          <div className=\"todo-details\">\n            <header>\n              <span>Assigned To: {details.assignee}</span>\n              <span className='due'>Due: {details.due}</span>\n            </header>\n            <div className=\"item\">\n              {details.text}\n            </div>\n          </div>\n        </Modal>\n      </When>\n    </>\n  );\n}\n\nexport default ToDoList;\n\n\n/*********************************************/\n\n// import React from 'react';\n// import { When } from '../if/index.js';\n// import Modal from '../modal/modal.js';\n\n// import './toDoList.scss';\n\n// const todoAPI = 'https://api-js401.herokuapp.com/api/v1/todo';\n\n// class ToDo extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       todoList: [],\n//       item: {},\n//       showDetails: false,\n//       details: {},\n//     };\n//   }\n\n//   handleInputChange = e => {\n//     this.setState({ item: {...this.state.item, [e.target.name]: e.target.value} });\n//   };\n\n//   callAPI = (url, method='get', body, handler, errorHandler) => {\n\n//     return fetch(url, {\n//       method: method,\n//       mode: 'cors',\n//       cache: 'no-cache',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: body ? JSON.stringify(body) : undefined,\n//     })\n//       .then(response => response.json())\n//       .then(data => typeof handler === 'function' ? handler(data) : null )\n//       .catch( (e) => typeof errorHandler === 'function' ? errorHandler(e) : console.error(e)  );\n//   };\n\n//   addItem = (e) => {\n\n//     e.preventDefault();\n//     e.target.reset();\n\n//     const _updateState = newItem =>\n//       this.setState({\n//         todoList: [...this.state.todoList, newItem],\n//       });\n\n//     this.callAPI( todoAPI, 'POST', this.state.item, _updateState );\n\n//   };\n\n//   deleteItem = id => {\n\n//     const _updateState = (results) =>\n//       this.setState({\n//         todoList: this.state.todoList.filter(item => item._id !== id),\n//       });\n\n//     this.callAPI( `${todoAPI}/${id}`, 'DELETE', undefined, _updateState );\n\n//   };\n\n//   saveItem = updatedItem => {\n\n//     const _updateState = (newItem) =>\n//       this.setState({\n//         todoList: this.state.todoList.map(item =>\n//           item._id === newItem._id ? newItem : item\n//         ),\n//       });\n\n//     this.callAPI( `${todoAPI}/${updatedItem.id}`, 'PUT', updatedItem, _updateState );\n\n//   };\n\n//   toggleComplete = id => {\n//     let item = this.state.todoList.filter(i => i._id === id)[0] || {};\n//     if (item._id) {\n//       item.complete = !item.complete;\n//       this.saveItem(item);\n//     }\n//   };\n\n//   toggleDetails = id => {\n//     let showDetails = ! this.state.showDetails;\n//     let details = this.state.todoList.filter( item => item._id === id )[0] || {};\n//     this.setState({details, showDetails});\n//   }\n\n//   getTodoItems = () => {\n//     const _updateState = data => this.setState({ todoList: data.results });\n//     this.callAPI( todoAPI, 'GET', undefined, _updateState );\n//   };\n\n//   componentDidMount = () => {\n//     this.getTodoItems();\n//   }\n\n//   render() {\n\n//     return (\n//       <>\n//         <header>\n//           <h2>\n//             There are\n//             {this.state.todoList.filter( item => !item.complete ).length}\n//             Items To Complete\n//           </h2>\n//         </header>\n\n//         <section className=\"todo\">\n\n//           <div>\n//             <h3>Add Item</h3>\n//             <form onSubmit={this.addItem}>\n//               <label>\n//                 <span>To Do Item</span>\n//                 <input\n//                   name=\"text\"\n//                   placeholder=\"Add To Do List Item\"\n//                   onChange={this.handleInputChange}\n//                 />\n//               </label>\n//               <label>\n//                 <span>Difficulty Rating</span>\n//                 <input type=\"range\" min=\"1\" max=\"5\" name=\"difficulty\" defaultValue=\"3\" onChange={this.handleInputChange} />\n//               </label>\n//               <label>\n//                 <span>Assigned To</span>\n//                 <input type=\"text\" name=\"assignee\" placeholder=\"Assigned To\" onChange={this.handleInputChange} />\n//               </label>\n//               <label>\n//                 <span>Due</span>\n//                 <input type=\"date\" name=\"due\" onChange={this.handleInputChange} />\n//               </label>\n//               <button>Add Item</button>\n//             </form>\n//           </div>\n\n//           <div>\n//             <ul>\n//               { this.state.todoList.map(item => (\n//                 <li\n//                   className={`complete-${item.complete.toString()}`}\n//                   key={item._id}\n//                 >\n//                   <span onClick={() => this.toggleComplete(item._id)}>\n//                     {item.text}\n//                   </span>\n//                   <button onClick={() => this.toggleDetails(item._id)}>\n//                     Details\n//                   </button>\n//                   <button onClick={() => this.deleteItem(item._id)}>\n//                     Delete\n//                   </button>\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         </section>\n\n//         <When condition={this.state.showDetails}>\n//           <Modal title=\"To Do Item\" close={this.toggleDetails}>\n//             <div className=\"todo-details\">\n//               <header>\n//                 <span>Assigned To: {this.state.details.assignee}</span>\n//                 <span>Due: {this.state.details.due}</span>\n//               </header>\n//               <div className=\"item\">\n//                 {this.state.details.text}\n//               </div>\n//             </div>\n//           </Modal>\n//         </When>\n//       </>\n//     );\n//   }\n// }\n\n// export default ToDo;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\n\nimport Footer from './components/footer/footer.js';\n// import ToDoList from './components/to-do-list/toDoList.js';\nimport ToDoList from './components/to-do-list/api-with-toDoList.js';\nimport SettingProvider from './components/context/context.js';\n\nimport './app.scss';\n\nfunction App(){\n\n  return(\n    <SettingProvider>\n      <div className=\"container\">\n        <ToDoList />\n        <Footer />\n      </div>\n    </SettingProvider>\n  );\n\n}\n\nexport default App;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app.js';\n\nfunction Main() {\n  return(\n    <>\n      <App />\n    </>\n  );\n}\n\nReactDOM.render(<Main />, document.getElementById('root'));\n"],"sourceRoot":""}